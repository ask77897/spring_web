<style>
	.hidden {
		display: none;
	}
</style>
<div class="my-5">
	<h1 class="text-center mb-5">댓글 관리</h1>
	<div id="btn_write" class="mb-5">
		<button class="btn btn-dark w-100">댓글작성</button>
	</div>
	<div class="my-5" id="div_write" style="display: none;">
		<textarea id="txt_body" class="form-control" rows="5" placeholder="댓글 내용을 입력하세요."></textarea>
		<div class="text-end mt-2">
			<button class="btn btn-dark px-5" id="btn_insert">등록</button>
		</div>
	</div>
	<div id="div_comments"></div>
	<div id="pagination" class="pagination justify-content-center mt-5"></div>
</div>
<script id="temp_comments" type="x-handlebars-template">
	{{#each .}}
	<div class="row">
		<div class="col-2 text-center">
			<img src="{{fn_photo photo}}" width="50" class="photo"/><br/>
			<small>{{uname}}</small>
		</div>
		<div class="col">
			<div>{{fmtdate}}</div>
			<div class="view">
				[{{cid}}] {{body}}
				<div class="text-end {{fn_hidden writer}}">
					<button class="btn btn-dark btn-sm btn_edit">수정</button>
					<button class="btn btn-secondary btn-sm btn_delete" cid="{{cid}}">삭제</button>
				</div>
			</div>
			<div class="edit" style="display:none;">
				<textarea class="body form-control" rows="5">{{body}}</textarea>
				<div class="text-end mt-2">
					<button class="btn btn-dark btn-sm btn_save" cid="{{cid}}">저장</button>
					<button class="btn btn-secondary btn-sm btn_cancel" >취소</button>
				</div>
			</div>
		</div>
	</div>
	<hr/>
	{{/each}}
</script>
<script>
	let page = 1;
	let size = 3;
	pid = "[[${param.pid}]]";
	//alert(pid)
	getTotal();

	if (sessionStorage.getItem("uid")) {
		$("#btn_write, #div_write").toggle();
	}
	
	$("#div_comments").on("click", ".btn_edit", function(){
		const row = $(this).parent().parent().parent();
		row.find(".view").hide();
		row.find(".edit").show();
	})
	$("#div_comments").on("click", ".btn_cancel", function(){
		const row = $(this).parent().parent().parent();
		row.find(".view").show();
		row.find(".edit").hide();
	})
	$("#div_comments").on("click", ".btn_save", function(){
		const cid = $(this).attr("cid");
		const row = $(this).parent().parent().parent();
		const body = row.find(".body").val();
		if(confirm("댓글을 수정하시겠습니끼?")){
			alert(cid + body);
		}
	})
	
	$("#div_comments").on("click", ".btn_delete", function(){
		//alert("...");
		const cid = $(this).attr("cid");
		if(confirm(`${cid}번 댓글을 삭제하시겠습니까?`)){
			$.ajax({
				type:'get',
				url:'/comments/delete',
				data:{cid},
				success:function(){
					page = 1;
					getTotal();
				}
				
			})
		}
	})
	$("#btn_insert").on("click", function () {
		const writer = sessionStorage.getItem("uid");
		const body = $("#txt_body").val();
		if (body == "") {
			alert("댓글 내용을 입력하세요.");
			$("#txt_body").focus();
			return;
		}
		//alert(`${writer}\n${body}\n${pid}`);
		$.ajax({
			type: 'post',
			url: '/comments/insert',
			data: JSON.stringify({pid, body, writer}),
			contentType: 'application/json',
			success: function () {
				alert("댓글이 등록되었습니다.");
				getTotal();
				$("#txt_body").val("");
			}
		})
	})
	$("#btn_write").on("click", function () {
		sessionStorage.setItem("target", "/posts/read?pid=" + pid);
		location.href = "/users/login";
	})
	function getComments() {
		$.ajax({
			type: 'get',
			url: '/comments/list.json',
			data: {page, size, pid},
			success: function (data) {
				console.log(data);
				const temp = Handlebars.compile($("#temp_comments").html());
				$("#div_comments").html(temp(data));
			}
		})
	}
	function getTotal() {
		$.ajax({
			type: 'get',
			url: '/comments/total',
			data: {pid},
			success: function (data) {
				if (data > size) {
					$("#pagination").show();
					const totalPages = Math.ceil(data / size);
					$("#pagination").twbsPagination("changeTotalPages", totalPages, page)
				} else {
					getComments();
					$("#pagination").hide();
				}
			}
		})
	}
	$('#pagination').twbsPagination({
		totalPages: 10, //총 페이지 번호 수
		visiblePages: 5, // 하단에서 한 번에 보여 지는 페이지 번호 수
		startPage: 1, // 시작 시 표시되는 현재 페이지
		initiateStartPageClick: false, // 플러그인이 시작 시 페이지 버튼 클릭 여부 (default : true) 
		first: '<<', // 페이지네이션 버튼 중 처음으로 돌아가는 버튼에 쓰여 있는 텍스트
		prev: '<', // 이전 페이지 버튼에 쓰여 있는 텍스트
		next: '>', // 다음 페이지 버튼에 쓰여 있는 텍스트
		last: '>>', // 페이지네이션 버튼 중 마지막으로 가는 버튼에 쓰여 있는 텍스트
		onPageClick: function (event, clickPage) {
			page = clickPage;
			getComments();
		}
	});
</script>
<script>
	Handlebars.registerHelper("fn_photo", function (photo) {
		if (photo) {
			return "/display?file=" + photo;
		} else {
			return "http://via.placeholder.com/100x100";
		}
	})
	Handlebars.registerHelper("fn_hidden", function (writer) {
		if (sessionStorage.getItem("uid") != writer) {
			return "hidden";
		}
	})
</script>